/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import ecc.elgamal.ByteConverter;
import ecc.elgamal.ElGamalAlgorithm;
import ecc.elgamal.EncryptionPoint;
import ecc.elgamal.HexaConverter;
import ecc.elgamal.KeyGenerator;
import ecc.elgamal.Point;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author angelynz95
 */
public class MainPanel extends javax.swing.JPanel {
    // Atribut
    private ByteConverter byteConverter;
    private ElGamalAlgorithm elGamal;
    private ArrayList<EncryptionPoint> cipher;
    private HexaConverter hexaConverter;
    private KeyGenerator keyGenerator;
    private ArrayList<Long> plain;
    private Path path;
    private Point privateKey;
    private Point publicKey;

    /**
     * Creates new form EncryptionPanel
     */
    public MainPanel(long a, long b) {
        initComponents();
        cipher = new ArrayList<>();
        plain = new ArrayList<>();
        byteConverter = new ByteConverter();
        hexaConverter = new HexaConverter();
        keyGenerator = new KeyGenerator();
        keyGenerator.setA(a);
        keyGenerator.setB(b);
        keyGenerator.ellipticalCurveFunc();
        orderLabel.setText("Order = " + (keyGenerator.getLargestOrder() + 1));
        elGamal = new ElGamalAlgorithm(keyGenerator.getA(), keyGenerator.getB());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        privateKeyTextField = new javax.swing.JTextField();
        publicKeyTextField = new javax.swing.JTextField();
        fileTextField = new javax.swing.JTextField();
        privateKeyButton = new javax.swing.JButton();
        publicKeyButton = new javax.swing.JButton();
        fileButton = new javax.swing.JButton();
        encryptRadioButton = new javax.swing.JRadioButton();
        decryptRadioButton = new javax.swing.JRadioButton();
        saveButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        plainTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        cipherTextArea = new javax.swing.JTextArea();
        plainLabel = new javax.swing.JLabel();
        cipherLabel = new javax.swing.JLabel();
        secretLabel = new javax.swing.JLabel();
        secretTextField = new javax.swing.JTextField();
        orderLabel = new javax.swing.JLabel();
        executeButton = new javax.swing.JButton();
        randomLabel = new javax.swing.JLabel();
        randomTextField = new javax.swing.JTextField();

        privateKeyTextField.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N

        publicKeyTextField.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        publicKeyTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                publicKeyTextFieldActionPerformed(evt);
            }
        });

        fileTextField.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N

        privateKeyButton.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        privateKeyButton.setText("Generate Private Key");
        privateKeyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                privateKeyButtonActionPerformed(evt);
            }
        });

        publicKeyButton.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        publicKeyButton.setText("Generate Public Key");
        publicKeyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                publicKeyButtonActionPerformed(evt);
            }
        });

        fileButton.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        fileButton.setText("Browse File");
        fileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButtonActionPerformed(evt);
            }
        });

        encryptRadioButton.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        encryptRadioButton.setSelected(true);
        encryptRadioButton.setText("Encrypt");
        encryptRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptRadioButtonActionPerformed(evt);
            }
        });

        decryptRadioButton.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        decryptRadioButton.setText("Decrypt");
        decryptRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptRadioButtonActionPerformed(evt);
            }
        });

        saveButton.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        plainTextArea.setColumns(20);
        plainTextArea.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        plainTextArea.setRows(5);
        plainTextArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setViewportView(plainTextArea);

        cipherTextArea.setColumns(20);
        cipherTextArea.setRows(5);
        jScrollPane2.setViewportView(cipherTextArea);

        plainLabel.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        plainLabel.setText("Plaintext");

        cipherLabel.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        cipherLabel.setText("Ciphertext");

        secretLabel.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        secretLabel.setText("Secret Number");

        secretTextField.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N

        orderLabel.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        orderLabel.setForeground(new java.awt.Color(255, 51, 51));

        executeButton.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        executeButton.setText("Execute");
        executeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeButtonActionPerformed(evt);
            }
        });

        randomLabel.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        randomLabel.setText("Random Number");

        randomTextField.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane2)
                            .addComponent(cipherLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 792, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(101, 101, 101)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(decryptRadioButton)
                                    .addComponent(encryptRadioButton)
                                    .addComponent(executeButton))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(privateKeyTextField)
                            .addComponent(publicKeyTextField)
                            .addComponent(fileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 850, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(plainLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(secretLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(secretTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(95, 95, 95)
                                .addComponent(randomLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(randomTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(122, 122, 122)
                                .addComponent(orderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 112, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(privateKeyButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fileButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(publicKeyButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(59, 59, 59))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(65, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(secretLabel)
                        .addComponent(secretTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(randomLabel)
                        .addComponent(randomTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(orderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(privateKeyButton)
                    .addComponent(privateKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(publicKeyButton)
                    .addComponent(publicKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileButton))
                .addGap(88, 88, 88)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(plainLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(cipherLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(encryptRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(decryptRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(executeButton)
                        .addGap(100, 100, 100)
                        .addComponent(saveButton)))
                .addGap(84, 84, 84))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void publicKeyTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_publicKeyTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_publicKeyTextFieldActionPerformed

    private void privateKeyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_privateKeyButtonActionPerformed
        // TODO add your handling code here:
        List<String> lines;
        
        privateKey = keyGenerator.generatePrivateKey(Integer.parseInt(secretTextField.getText()));
        privateKeyTextField.setText("(" + privateKey.getX() + "," + privateKey.getY() + ")");
        lines = Arrays.asList(privateKeyTextField.getText());
        path = Paths.get("key.pri");
        try {
            Files.write(path, lines, Charset.forName("UTF-8"));
        } catch (IOException ex) {
            Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_privateKeyButtonActionPerformed

    private void publicKeyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_publicKeyButtonActionPerformed
        // TODO add your handling code here:
        List<String> lines;
        
        publicKey = keyGenerator.generatePublicKey(privateKey);
        publicKeyTextField.setText("(" + publicKey.getX() + "," + publicKey.getY() + ")");
        lines = Arrays.asList(publicKeyTextField.getText());
        path = Paths.get("key.pub");
        try {
            Files.write(path, lines, Charset.forName("UTF-8"));
        } catch (IOException ex) {
            Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_publicKeyButtonActionPerformed

    private void fileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            if (encryptRadioButton.isSelected()) {
                List<String> plaintext;
                String temp = "";
                
                try {
                    plaintext = Files.readAllLines(fileChooser.getSelectedFile().toPath());
                    fileTextField.setText(fileChooser.getSelectedFile().toString());
                    plain.clear();
                    for (int i = 0; i < plaintext.size(); i++) {
                        for (int j = 0; j < plaintext.get(i).length(); j++) {
                            plain.add((long) plaintext.get(i).charAt(j));
                            temp += plain.get(plain.size() - 1) + "\n";
                        }
                    }
                    plainTextArea.setText(temp);
                } catch (IOException ex) {
                    Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                List<String> ciphertext;
                String temp = "";
                
                try {
                    ciphertext = Files.readAllLines(fileChooser.getSelectedFile().toPath());
                    for (int i = 0; i < ciphertext.size(); i++) {
                        String[] cipherHexa = ciphertext.get(i).split(" ");
                        cipher.add(new EncryptionPoint(new Point((long) hexaConverter.deconvertHexaToChar(cipherHexa[0]), (long) hexaConverter.deconvertHexaToChar(cipherHexa[1])), new Point((long) hexaConverter.deconvertHexaToChar(cipherHexa[2]), (long) hexaConverter.deconvertHexaToChar(cipherHexa[3]))));
                        temp += "[ (" + cipher.get(i).getC1().getX() + "," + cipher.get(i).getC1().getY() + ") , (" + cipher.get(i).getC2().getX() + "," + cipher.get(i).getC2().getY() + ") ]\n";
                    }
                    cipherTextArea.setText(temp);
                } catch (IOException ex) {
                    Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            fileTextField.setText("");
        }
    }//GEN-LAST:event_fileButtonActionPerformed

    private void encryptRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptRadioButtonActionPerformed
        // TODO add your handling code here:
        if (encryptRadioButton.isSelected()) {
            decryptRadioButton.setSelected(false);
        } else {
            decryptRadioButton.setSelected(true);
        }
    }//GEN-LAST:event_encryptRadioButtonActionPerformed

    private void decryptRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptRadioButtonActionPerformed
        // TODO add your handling code here:
        if (decryptRadioButton.isSelected()) {
            encryptRadioButton.setSelected(false);
        } else {
            encryptRadioButton.setSelected(true);
        }
    }//GEN-LAST:event_decryptRadioButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        if (encryptRadioButton.isSelected()) {
            List<String> lines = new ArrayList<>();
            for (int i = 0; i < cipher.size(); i++) {
                lines.add(hexaConverter.convertCharToHexa((char) cipher.get(i).getC1().getX()) + " " + hexaConverter.convertCharToHexa((char) cipher.get(i).getC1().getY()) + " " + hexaConverter.convertCharToHexa((char) cipher.get(i).getC2().getX()) + " " + hexaConverter.convertCharToHexa((char) cipher.get(i).getC2().getY()));
            }
            path = Paths.get("cipher.txt");
            try {
                Files.write(path, lines, Charset.forName("UTF-8"));
            } catch (IOException ex) {
                Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void executeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeButtonActionPerformed
        // TODO add your handling code here:
        String temp = "";
        if (encryptRadioButton.isSelected()) {
            cipher = elGamal.encrypt(plain, keyGenerator.getG(), publicKey, Long.parseLong(randomTextField.getText()));
            for (int i = 0; i < cipher.size(); i++) {
                temp += "[ (" + cipher.get(i).getC1().getX() + "," + cipher.get(i).getC1().getY() + ") , (" + cipher.get(i).getC2().getX() + "," + cipher.get(i).getC2().getY() + ") ]\n";
            }
            cipherTextArea.setText(temp);
        } else {
            plain = elGamal.decrypt(cipher, Long.parseLong(secretTextField.getText()));
            for (int i = 0; i < plain.size(); i++) {
                temp += plain.get(i) + "\n";
            }
            plainTextArea.setText(temp);
        }
    }//GEN-LAST:event_executeButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel cipherLabel;
    private javax.swing.JTextArea cipherTextArea;
    private javax.swing.JRadioButton decryptRadioButton;
    private javax.swing.JRadioButton encryptRadioButton;
    private javax.swing.JButton executeButton;
    private javax.swing.JButton fileButton;
    private javax.swing.JTextField fileTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel orderLabel;
    private javax.swing.JLabel plainLabel;
    private javax.swing.JTextArea plainTextArea;
    private javax.swing.JButton privateKeyButton;
    private javax.swing.JTextField privateKeyTextField;
    private javax.swing.JButton publicKeyButton;
    private javax.swing.JTextField publicKeyTextField;
    private javax.swing.JLabel randomLabel;
    private javax.swing.JTextField randomTextField;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel secretLabel;
    private javax.swing.JTextField secretTextField;
    // End of variables declaration//GEN-END:variables
}
